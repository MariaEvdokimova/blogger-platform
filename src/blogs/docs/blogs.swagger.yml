paths:
  /blogs:
    get:
      summary: Returns blogs with paging
      tags: [ Blogs ]
      parameters:
        - name: searchNameTerm
          in: query
          description: 'Search term for blog Name: Name should contains this term in any position'
          required: false
          schema:
            type: string
            default: null

        - name: sortBy
          in: query
          description: Field to sort by.
          required: false
          schema:
            type: string
            default: createdAt

        - name: sortDirection
          in: query
          description: 'Default value: desc'
          required: false
          schema:
            $ref: '#/components/schemas/SortDirections'
            default: desc

        - name: pageNumber
          in: query
          description: >
            Page number — the number of portions that should be returned.
          required: false
          schema:
            type: integer
            format: int32
            default: 1

        - name: pageSize
          in: query
          description: >
            Page size — the portion size that should be returned.
          required: false
          schema:
            type: integer
            format: int32
            default: 10

      responses:
        200:
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Paginator<BlogViewModel>'
            application/json:
              schema:
                $ref: '#/components/schemas/Paginator<BlogViewModel>'
            text/json:
              schema:
                $ref: '#/components/schemas/Paginator<BlogViewModel>'

    post:
      summary: Create new blog
      tags: [ Blogs ]
      security:
        - basicAuth: [ ]
      requestBody:
        description: Data for constructing new Blog entity
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogInputModel'
          text/json:
            schema:
              $ref: '#/components/schemas/BlogInputModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/BlogInputModel'
      responses:
        201:
          description: Returns the newly created blog
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/BlogViewModel'
            application/json:
              schema:
                $ref: '#/components/schemas/BlogViewModel'
            text/json:
              schema:
                $ref: '#/components/schemas/BlogViewModel'
        400:
          description: If the inputModel has incorrect values
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/APIErrorResult'
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResult'
            text/json:
              schema:
                $ref: '#/components/schemas/APIErrorResult'
        401: 
          description: Unauthorized

  /blogs/{blogId}/posts:
    get:
      summary: Returns all posts for specified blog
      tags: [ Blogs ]
      parameters:
        - name: pageNumber
          in: query
          required: false
          description: pageNumber is number of portions that should be returned
          schema:
            type: integer
            format: int32
            default: 1

        - name: pageSize
          in: query
          required: false
          description: pageSize is portions size that should be returned
          schema:
            type: integer
            format: int32
            default: 10

        - name: sortBy
          in: query
          required: false
          description: 'Default value : createdAt'
          schema:
            type: string
            default: createdAt

        - name: sortDirection
          in: query
          required: false
          description: 'Default value: desc'
          schema:
            $ref: '#/components/schemas/SortDirections'
            default: desc

        - name: blogId
          in: path
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Paginator<PostViewModel>'
            application/json:
              schema:
                $ref: '#/components/schemas/Paginator<PostViewModel>'
            text/json:
              schema:
                $ref: '#/components/schemas/Paginator<PostViewModel>'

        '404':
          description: If specificied blog is not exists

    post:
      summary: Create new post for specific blog
      tags: [ Blogs ]
      security:
        - basicAuth: [ ]
      parameters:
        - name: blogId
          in: path
          required: true
          schema:
            type: string

      requestBody:
        description: Data for constructing new post entity
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/h02.db.BlogPostInputModel'
          text/json:
            schema:
              $ref: '#/components/schemas/h02.db.BlogPostInputModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/h02.db.BlogPostInputModel'

      responses:
        '201':
          description: Returns the newly created post
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PostViewModel'
            application/json:
              schema:
                $ref: '#/components/schemas/PostViewModel'
            text/json:
              schema:
                $ref: '#/components/schemas/PostViewModel'

        '400':
          description: If the inputModel has incorrect values
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/APIErrorResult'
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResult'
            text/json:
              schema:
                $ref: '#/components/schemas/APIErrorResult'

        '401':
          description: Unauthorized

        '404':
          description: If specified blog doesn't exists

  /blogs/{id}:
    get:
      summary: Returns blog by id
      tags: [ Blogs ]
      parameters:
        - name: id
          in: path
          description: Existing blog id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/BlogViewModel'
            application/json:
              schema:
                $ref: '#/components/schemas/BlogViewModel'
            text/json:
              schema:
                $ref: '#/components/schemas/BlogViewModel'
        404:
          description: "Not Found"
    put:
      summary: Update existing blog by id with InputModel
      tags: [ Blogs ]
      security:
        - basicAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Data for updating
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogInputModel'
          text/json:
            schema:
              $ref: '#/components/schemas/BlogInputModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/BlogInputModel'
      responses:
        204:
          description: "No Content"
        400:
          description: If the inputModel has incorrect values
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/APIErrorResult'
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResult'
            text/json:
              schema:
                $ref: '#/components/schemas/APIErrorResult'
        401: 
          description: Unauthorized
        404:
          description: "Not Found"        
    delete:
      summary: Delete blog specified by id
      tags: [ Blogs ]
      security:
        - basicAuth: [ ]
      parameters:
        - name: id
          in: path
          description: Blog id
          required: true
          schema:
            type: string
      responses:
        204:
          description: "No Content"
        401: 
          description: Unauthorized
        404:
          description: "Not Found"  

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: "Enter JWT Bearer token only"
    basicAuth:
      type: http
      scheme: basic
      description: "Username and Password"
    refreshToken:
      type: apiKey
      in: cookie
      name: refreshToken
      description: "JWT refreshToken inside cookie. Must be correct, and must not expire"

  schemas:
    APIErrorResult:
      type: object
      properties:
        errorsMessages:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/FieldError'
    
    FieldError:
      type: object
      properties:
        message:
          type: string
          nullable: true
          description: "Message with error explanation for certain field"
        field:
          type: string
          nullable: true
          description: "What field/property of input model has error"
    
    Paginator<BlogViewModel>:
      type: object
      required:
        - items
      properties:
        pagesCount:
          type: integer
          format: int32
        page:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/BlogViewModel'

    Paginator<PostViewModel>:
      type: object
      required:
        - items
      properties:
        pagesCount:
          type: integer
          format: int32
        page:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        totalCount:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/PostViewModel'

    BlogInputModel:
      type: object
      required:
        - name
        - description
        - websiteUrl
      properties:
        name:
          type:	string
          maxLength: 15
        description:
          type: string
          maxLength: 500
        websiteUrl:	
          type: string
          maxLength: 100
          pattern: ^https://([a-zA-Z0-9_-]+\.)+[a-zA-Z0-9_-]+(\/[a-zA-Z0-9_-]+)*\/?$

    h02.db.BlogPostInputModel:
      type: object
      required:
        - title
        - shortDescription
        - content
      properties:
        title:
          type:	string
          maxLength: 30
        shortDescription:
          type: string
          maxLength: 100
        content:	
          type: string
          maxLength: 1000

    BlogViewModel:
      type: object
      required:
        - id
        - name
        - description
        - websiteUrl
      properties:
        id:	
          type: string
        name:	
          type: string
        description:	
          type: string
        websiteUrl:	
          type: string
        createdAt:
          type: string
          format: date-time
        isMembership:
          type:	boolean
          description: True if user has not expired membership subscription to blog
  
    SortDirections:
      type: string
      enum:
        - asc
        - desc
