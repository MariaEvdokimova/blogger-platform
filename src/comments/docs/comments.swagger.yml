paths:
  /comments/{commentId}:
    put:
      summary: Update existing comment by id with InputModel
      tags: [ Comments ]
      security:
        - bearerAuth: []
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Data for updating
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentInputModel'
          text/json:
            schema:
              $ref: '#/components/schemas/CommentInputModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CommentInputModel'
      responses:
        204:
          description: No Content
        400:
          description: If the inputModel has incorrect values
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/APIErrorResult'
            application/json:
              schema:
                $ref: '#/components/schemas/APIErrorResult'
            text/json:
              schema:
                $ref: '#/components/schemas/APIErrorResult'
        401: 
          description: Unauthorized
        403:
          description: If try edit the comment that is not your own
        404:
          description: "Not Found" 

    delete:
      summary: Delete comment specified by id
      tags: [ Comments ]
      security:
        - bearerAuth: []
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: No Content
        401: 
          description: Unauthorized
        403:
          description: If try edit the comment that is not your own
        404:
          description: "Not Found" 

  /comments/{id}:
    get:
      summary: Return comment by id
      tags: [ Comments ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success          
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CommentViewModel'
            application/json:
              schema:
                $ref: '#/components/schemas/CommentViewModel'
            text/json:
              schema:
                $ref: '#/components/schemas/CommentViewModel'
        404:
          description: "Not Found" 
    
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: "Enter JWT Bearer token only"
    basicAuth:
      type: http
      scheme: basic
      description: "Username and Password"
    refreshToken:
      type: apiKey
      in: cookie
      name: refreshToken
      description: "JWT refreshToken inside cookie. Must be correct, and must not expire"

  schemas:
    APIErrorResult:
      type: object
      properties:
        errorsMessages:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/FieldError'
    
    FieldError:
      type: object
      properties:
        message:
          type: string
          nullable: true
          description: "Message with error explanation for certain field"
        field:
          type: string
          nullable: true
          description: "What field/property of input model has error"

    CommentInputModel:
      type: object
      required:
        - content
      properties:
        content:
          type:	string
          maxLength: 300
          minLength: 20

    CommentViewModel:
      type: object
      required:
        - id
        - content
        - commentatorInfo
        - createdAt
      properties:
        id:
          type:	string
        content:
          type:	string
        commentatorInfo:
          type: object
          items:
            $ref: '#/components/schemas/CommentatorInfo'
        createdAt:
          type:	string
          format: date-time

    commentatorInfo:
      type: object
      required:
        - userId
        - userLogin
      properties:
        userId:
          type:	string
        userLogin:
          type:	string
